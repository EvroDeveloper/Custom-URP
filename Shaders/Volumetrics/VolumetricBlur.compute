#pragma kernel VolBlur

#define Samples 5

RWTexture3D<float4> Result;
Texture3D<float4> InTex;

[numthreads(4,4,4)]
void VolBlur (uint3 id : SV_DispatchThreadID)
{
  //  int Samples = 20;

    //for (int i = 0; i < Samples; i++) {

    //    Result[id.xyz] += InTex[ uint3(id.x, id.y + i, id.z) ].rgba / Samples;
    //}

    
    //Box blur
    Result[id.xyz] = InTex[uint3(id.x, id.y, id.z)].rgba ;

    Result[id.xyz] += InTex[uint3(id.x + 1, id.y, id.z)].rgba ;
    Result[id.xyz] += InTex[uint3(id.x - 1, id.y, id.z)].rgba ;

    Result[id.xyz] += InTex[uint3(id.x , id.y + 1, id.z)].rgba ;
    Result[id.xyz] += InTex[uint3(id.x , id.y - 1, id.z)].rgba ;

    Result[id.xyz] += InTex[uint3(id.x + 1, id.y + 1, id.z)].rgba ;
    Result[id.xyz] += InTex[uint3(id.x - 1, id.y - 1, id.z)].rgba ;

    Result[id.xyz] += InTex[uint3(id.x - 1, id.y + 1, id.z)].rgba ;
    Result[id.xyz] += InTex[uint3(id.x + 1, id.y - 1, id.z)].rgba ;

    Result[id.xyz] += InTex[uint3(id.x, id.y, id.z + 1)].rgba;
    Result[id.xyz] += InTex[uint3(id.x, id.y, id.z) - 1].rgba;



    Result[id.xyz] = Result[id.xyz] ;
}
